d1_schools <- filter(all_schools, division == 1 & year == 2023 & team_id ==3)
d1_schools
d1_schools <- filter(all_schools, division == 1 & year == 2023 & team_id == 4)
d1_schools
d1_schools <- filter(all_schools, division == 1 & year == 2023)
d1_schools
all_team_ids <- unique(d1_schools$team_id)
sort(all_team_ids, decreasing = FALSE)
d1_schools <- filter(all_schools, division == 1 & year == 2023 & team_id == 5)
d1_schools
all_team_ids <- sort(unique(d1_schools$team_id), decreasing = FALSE)
all_team_ids
d1_schools <- filter(all_schools, division == 1 & year == 2023)
all_team_ids <- sort(unique(d1_schools$team_id), decreasing = FALSE)
all_team_ids
--install.packages("baseballr")
##install.packages("baseballr")
library("baseballr")
install.packages("baseballr")
install.packages("baseballr")
library("baseballr")
library("dplyr")
all_schools <- ncaa_school_id_lu(team_name = "")
d1_schools <- filter(all_schools, division == 1 & year == 2023)
all_team_ids <- sort(unique(d1_schools$team_id), decreasing = FALSE)
all_team_ids
d1_schools
nc_state_test <- filter(all_schools,conference == 'ACC')
nc_state_test
unique(nc_state_test$team_name)
nc_state_test <- filter(all_schools,team_name == 'NC State')
nc_state_test
x <- ncaa_schedule_info(490, 2023)$game_info_url[2]
ncaa_pbp(game_info_url = x)
nc_state <- ncaa_pbp(game_info_url = x)
nc_state
nc_state.columns
nc_state.columns()
colnames(nc_state)
unique(nc_state$game_pbp_id)
x <- ncaa_schedule_info(490, 2023)#$game_info_url[2]
nc_state <- ncaa_pbp(game_info_url = x)
x
x <- ncaa_schedule_info(490, 2023)$game_info_url[1]
x
nc_state <- ncaa_pbp(game_info_url = x)
unique(nc_state$game_pbp_id)
nc_state <- ncaa_pbp(game_info_url = x)
x <- ncaa_schedule_info(490, 2023)
single_bscore <- x$game_info_url[1]
unique(x$game_info_url)
single_bscore <- x$game_info_url[1]
nc_state <- ncaa_pbp(game_info_url = x)
single_bscore <- x$game_info_url[1]
nc_state <- ncaa_pbp(game_info_url = single_bscore)
singe_pbp <- ncaa_pbp(game_info_url = single_bscore)
single_pbp <- ncaa_pbp(game_info_url = single_bscore)
single_pbp
single_pbp$description
columns(single_pbp)
colnames(single_pbp)
for(i in 1:nrow(single_pbp)) {
print(i)
}
for(i in 1:nrow(single_pbp)) {
print(i$description)
}
for(i in 1:nrow(single_pbp)) {
print(single_pbp[1]$description)
}
for(i in 1:nrow(single_pbp)) {
print(single_pbp[i]$description)
}
single_pbp
every_play <- single_pbp$description
single_pbp <- ncaa_pbp(game_info_url = single_bscore)
every_play <- single_pbp$description
every_play
for(i in 1:nrow(single_pbp)) {
print(single_pbp[i]$description)
}
nrow(single_pbp)
for(i in 1:nrow(single_pbp)) {
single_pbp[i]
}
for(i in 1:nrow(single_pbp)) {
single_pbp[i]$description
}
every_play
row_count <- nrow(single_pbp)
row_count
play <- single_pbp[i]$description
for(i in 1:row_count) {
play <- single_pbp[i]$description
print(play)
}
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single_or_not <- grepl(value, play)
print(play)
print(grepl)
}
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single_or_not <- grepl(value, play)
print(play)
print(single_or_not)
}
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer",play)
print(play)
if (single = TRUE) "SINGLE was hit"
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer",play)
print(play)
if (single == TRUE) {
print("SINGLE was hit")
}
}
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
print(play)
if (single = TRUE) {
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
print(play)
if (single == TRUE) {
print("b is greater than a")
}
}
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
print(play)
}
single_pbp
sub_df = subset(single_pbp, select = c(inning, inning_top_bot,batting,fielding,description))
sub_df
unique(sub_df)
new_test <- unique(sub_df)
row_count <- nrow(new_test)
row_count
for(i in 1:row_count) {
play <- new_test[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
print(play)
}
my_df <- as.data.frame(sub_df)
my_df
row_count <- nrow(my_df)
row_count
for(i in 1:row_count) {
play <- my_df[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
print(play)
}
my_df[1]
my_df
my_df[1,]
my_df[1]
row_count <- nrow(sub_df)
row_count
for(i in 1:row_count) {
play <- my_df[i,]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
print(play)
}
for(i in 1:row_count) {
play <- my_df[i,]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
if (single == TRUE) "Yes A single" else "NOt a single"
}
for(i in 1:row_count) {
play <- my_df[i,]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
if (single == TRUE) print("Yes A single") else print("NOt a single")
}
#install.packages("baseballr")
library("baseballr")
library("dplyr")
library("tidyverse")
remove.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
View(pbp)
library("baseballr")
library("dplyr")
library("tidyverse")
setwd('C:/Users/tyler/OneDrive/Coding Work Materials')
pbp <- read.csv(file="pbp.csv",
header=TRUE)
setwd('C:/Users/tyler/OneDrive/Coding Work Materials/ncaa_run_expectancies')
game_ids <- unique(pbp$game_pbp_id)
test_games <- sample(game_ids,size=10,replace=FALSE)
test_games_pbp <- filter(pbp,game_pbp_id %in% test_games)
#all_schools <- ncaa_school_id_lu(team_name = "")
#d1_schools <- filter(all_schools, division == 1 & year == 2023)
#all_team_ids <- sort(unique(d1_schools$team_id), decreasing = FALSE)
#nc_state_test <- filter(all_schools,team_name == 'NC State')
## 490 is NC State's team_id
### NEEDS ####
# 1) Start of Inning position
# 2) End of Inning position
# 3) Previous Base-Out State
# 4) Result
# 5) New Base-Out State
# 6) Runs scored til end of inning
## Grabbing the schedule info for NC State for 2023
#x <- ncaa_schedule_info(490, 2023)
## Using first available game of season only for testing only
#single_bscore <- x$game_info_url[1]
#single_pbp <- ncaa_pbp(game_info_url = single_bscore)
#print(single_bscore)
## Removing summary stats that are optional at the end of each inning to get rid of noise
summary_stats <- c('R:', 'H:', 'LOB:')
set_pbp <- filter(test_games_pbp,!grepl(paste(summary_stats, collapse = '|'),description))
## Attributes useful for other calculations
set_pbp <- set_pbp %>%
mutate(inning_half = case_when(inning_top_bot == 'top' ~ ((strtoi(inning) * 2) - 1), # in this case, set WL to 1
TRUE  ~ (strtoi(inning) * 2)),
result_runs = strtoi(sub("\\-.*","",score)) + strtoi(sub("*.\\-","",score)),
current_runs = lag(result_runs,n=1,default=0),
row_id = row_number()
)
View(set_pbp)
set_pbp <- filter(test_games_pbp,!grepl(paste(summary_stats, collapse = '|'),description))
## Attributes useful for other calculations
set_pbp <- set_pbp %>%
mutate(inning_half = case_when(inning_top_bot == 'top' ~ ((strtoi(inning) * 2) - 1), # in this case, set WL to 1
TRUE  ~ (strtoi(inning) * 2)),
#result_runs = strtoi(sub("\\-.*","",score)) + strtoi(sub("*.\\-","",score)),
#current_runs = lag(result_runs,n=1,default=0),
row_id = row_number()
)
View(set_pbp)
set_pbp <- filter(test_games_pbp,!grepl(paste(summary_stats, collapse = '|'),description))
## Attributes useful for other calculations
set_pbp <- set_pbp %>%
group_by(game_pbp_id)
mutate(inning_half = case_when(inning_top_bot == 'top' ~ ((strtoi(inning) * 2) - 1), # in this case, set WL to 1
TRUE  ~ (strtoi(inning) * 2)),
#result_runs = strtoi(sub("\\-.*","",score)) + strtoi(sub("*.\\-","",score)),
#current_runs = lag(result_runs,n=1,default=0),
row_id = row_number()
)
set_pbp <- filter(test_games_pbp,!grepl(paste(summary_stats, collapse = '|'),description))
## Attributes useful for other calculations
set_pbp <- set_pbp %>%
group_by(game_pbp_id) %>%
mutate(inning_half = case_when(inning_top_bot == 'top' ~ ((strtoi(inning) * 2) - 1), # in this case, set WL to 1
TRUE  ~ (strtoi(inning) * 2)),
#result_runs = strtoi(sub("\\-.*","",score)) + strtoi(sub("*.\\-","",score)),
#current_runs = lag(result_runs,n=1,default=0),
row_id = row_number()) %>%
ungroup()
View(set_pbp)
set_pbp <- filter(test_games_pbp,!grepl(paste(summary_stats, collapse = '|'),description))
## Attributes useful for other calculations
set_pbp <- set_pbp %>%
group_by(game_pbp_id) %>%
mutate(inning_half = case_when(inning_top_bot == 'top' ~ ((strtoi(inning) * 2) - 1), # in this case, set WL to 1
TRUE  ~ (strtoi(inning) * 2)),
result_runs = strtoi(sub("\\-.*","",score)) + strtoi(sub("*.\\-","",score)),
current_runs = lag(result_runs,n=1,default=0),
row_id = row_number()) %>%
ungroup()
View(set_pbp)
set_pbp_partial_clean <- set_pbp %>%
group_by(game_pbp_id,inning_half) %>%
mutate(
top_inning_flag = ifelse(min(which(set_pbp$inning_half == inning_half))==row_id,1,0),
end_inning_flag = ifelse(max(which(set_pbp$inning_half == inning_half))==row_id,1,0),
end_half_inning_runs = max(result_runs)
) %>%
ungroup()
warnings()
View(set_pbp_partial_clean)
set_pbp <- filter(test_games_pbp,!grepl(paste(summary_stats, collapse = '|'),description))
## Attributes useful for other calculations
set_pbp <- set_pbp %>%
group_by(game_pbp_id) %>%
mutate(inning_half = case_when(inning_top_bot == 'top' ~ ((strtoi(inning) * 2) - 1), # in this case, set WL to 1
TRUE  ~ (strtoi(inning) * 2)),
result_runs = strtoi(sub("\\-.*","",score)) + strtoi(sub("*.\\-","",score)),
current_runs = lag(result_runs,n=1,default=0),
row_id = row_number()) %>%
ungroup()
View(set_pbp)
string_string = "10-8"
string_string
strsplit(string_string,"-")
val <- strsplit(string_string,"-")
val
val[1] + val[2]
int(val[1])
strtoi(val[1]) + strtoi(val[2])
strtoi(val[1])
strtoi(val[1][1])
val
View(val)
val[[1]][1]
strtoi(val[[1]][1])
strtoi(val[[1]][1]) + strtoi(val[[1]][2])
set_pbp <- set_pbp %>%
group_by(game_pbp_id) %>%
result = 5
set_pbp <- set_pbp %>%
group_by(game_pbp_id) %>%
result = 5 %>%
mutate(inning_half = case_when(inning_top_bot == 'top' ~ ((strtoi(inning) * 2) - 1), # in this case, set WL to 1
TRUE  ~ (strtoi(inning) * 2)),
#result_runs = strtoi(sub("\\-.*","",score)) + strtoi(sub("*.\\-","",score)),
#result_runs = strtoi(strsplit(score,"-")[[1]][1]) + strtoi(strsplit(score,"-")[[1]][1])
current_runs = lag(result_runs,n=1,default=0),
row_id = row_number()) %>%
ungroup()
set_pbp <- filter(test_games_pbp,!grepl(paste(summary_stats, collapse = '|'),description))
## Attributes useful for other calculations
set_pbp <- set_pbp %>%
group_by(game_pbp_id) %>%
mutate(inning_half = case_when(inning_top_bot == 'top' ~ ((strtoi(inning) * 2) - 1), # in this case, set WL to 1
TRUE  ~ (strtoi(inning) * 2)),
#result_runs = strtoi(sub("\\-.*","",score)) + strtoi(sub("*.\\-","",score)),
result_runs = strtoi(strsplit(score,"-")[[1]][1]) + strtoi(strsplit(score,"-")[[1]][2]),
current_runs = lag(result_runs,n=1,default=0),
row_id = row_number()) %>%
ungroup()
View(set_pbp)
set_pbp <- filter(test_games_pbp,!grepl(paste(summary_stats, collapse = '|'),description))
## Attributes useful for other calculations
set_pbp <- set_pbp %>%
group_by(game_pbp_id) %>%
mutate(inning_half = case_when(inning_top_bot == 'top' ~ ((strtoi(inning) * 2) - 1), # in this case, set WL to 1
TRUE  ~ (strtoi(inning) * 2)),
#result_runs = strtoi(sub("\\-.*","",score)) + strtoi(sub("*.\\-","",score)),
result_runs = strsplit(score,"-")[[1]][1],
current_runs = lag(result_runs,n=1,default=0),
row_id = row_number()) %>%
ungroup()
set_pbp <- filter(test_games_pbp,!grepl(paste(summary_stats, collapse = '|'),description))
## Attributes useful for other calculations
set_pbp <- set_pbp %>%
group_by(game_pbp_id) %>%
mutate(inning_half = case_when(inning_top_bot == 'top' ~ ((strtoi(inning) * 2) - 1), # in this case, set WL to 1
TRUE  ~ (strtoi(inning) * 2)),
#result_runs = strtoi(sub("\\-.*","",score)) + strtoi(sub("*.\\-","",score)),
result_runs = strtoi(strsplit(score,"-")[[1]][1]),
current_runs = lag(result_runs,n=1,default=0),
row_id = row_number()) %>%
ungroup()
View(set_pbp)
set_pbp <- filter(test_games_pbp,!grepl(paste(summary_stats, collapse = '|'),description))
## Attributes useful for other calculations
set_pbp <- set_pbp %>%
group_by(game_pbp_id) %>%
mutate(inning_half = case_when(inning_top_bot == 'top' ~ ((strtoi(inning) * 2) - 1), # in this case, set WL to 1
TRUE  ~ (strtoi(inning) * 2)),
#result_runs = strtoi(sub("\\-.*","",score)) + strtoi(sub("*.\\-","",score)),
result_runs = strsplit(score,"-"),
#current_runs = lag(result_runs,n=1,default=0),
row_id = row_number()) %>%
ungroup()
View(set_pbp)
set_pbp <- filter(test_games_pbp,!grepl(paste(summary_stats, collapse = '|'),description))
## Attributes useful for other calculations
set_pbp <- set_pbp %>%
group_by(game_pbp_id) %>%
mutate(inning_half = case_when(inning_top_bot == 'top' ~ ((strtoi(inning) * 2) - 1), # in this case, set WL to 1
TRUE  ~ (strtoi(inning) * 2)),
#result_runs = strtoi(sub("\\-.*","",score)) + strtoi(sub("*.\\-","",score)),
result_runs = strsplit(score,"-")[1],
#current_runs = lag(result_runs,n=1,default=0),
row_id = row_number()) %>%
ungroup()
View(set_pbp)
set_pbp <- set_pbp %>%
group_by(game_pbp_id) %>%
mutate(inning_half = case_when(inning_top_bot == 'top' ~ ((strtoi(inning) * 2) - 1), # in this case, set WL to 1
TRUE  ~ (strtoi(inning) * 2)),
#result_runs = strtoi(sub("\\-.*","",score)) + strtoi(sub("*.\\-","",score)),
result_runs = strsplit(score,"-")[[1]],
#current_runs = lag(result_runs,n=1,default=0),
row_id = row_number()) %>%
ungroup()
set_pbp <- set_pbp %>%
group_by(game_pbp_id) %>%
mutate(inning_half = case_when(inning_top_bot == 'top' ~ ((strtoi(inning) * 2) - 1), # in this case, set WL to 1
TRUE  ~ (strtoi(inning) * 2)),
#result_runs = strtoi(sub("\\-.*","",score)) + strtoi(sub("*.\\-","",score)),
result_runs = strsplit(score,"-"),
#current_runs = lag(result_runs,n=1,default=0),
row_id = row_number()) %>%
ungroup()
View(set_pbp)
set_pbp <- set_pbp %>%
group_by(game_pbp_id) %>%
mutate(inning_half = case_when(inning_top_bot == 'top' ~ ((strtoi(inning) * 2) - 1), # in this case, set WL to 1
TRUE  ~ (strtoi(inning) * 2)),
#result_runs = strtoi(sub("\\-.*","",score)) + strtoi(sub("*.\\-","",score)),
result_runs = strsplit(score,"-")[1],
#current_runs = lag(result_runs,n=1,default=0),
row_id = row_number()) %>%
ungroup()
set_pbp <- filter(test_games_pbp,!grepl(paste(summary_stats, collapse = '|'),description))
## Attributes useful for other calculations
set_pbp <- set_pbp %>%
do.call("rbind", strsplit(as.character(set_pbp$score), "-",
fixed = TRUE)) %>%
group_by(game_pbp_id) %>%
mutate(inning_half = case_when(inning_top_bot == 'top' ~ ((strtoi(inning) * 2) - 1), # in this case, set WL to 1
TRUE  ~ (strtoi(inning) * 2)),
#result_runs = strtoi(sub("\\-.*","",score)) + strtoi(sub("*.\\-","",score)),
#result_runs = strsplit(score,"-")[1],
#current_runs = lag(result_runs,n=1,default=0),
row_id = row_number()) %>%
ungroup()
set_pbp <- filter(test_games_pbp,!grepl(paste(summary_stats, collapse = '|'),description))
## Attributes useful for other calculations
set_pbp(do.call("rbind", strsplit(as.character(set_pbp$score), "-",
fixed = TRUE)))
set_pbp <- filter(test_games_pbp,!grepl(paste(summary_stats, collapse = '|'),description))
## Attributes useful for other calculations
data.frame(do.call("rbind", strsplit(as.character(set_pbp$score), "-",
fixed = TRUE)))
View(set_pbp)
help("separate")
set_pbp <- filter(test_games_pbp,!grepl(paste(summary_stats, collapse = '|'),description))
set_pbp <- set_pbp %>%
separate(score, c('away_score', 'home_score'), sep="-") %>%
group_by(game_pbp_id) %>%
mutate(inning_half = case_when(inning_top_bot == 'top' ~ ((strtoi(inning) * 2) - 1), # in this case, set WL to 1
TRUE  ~ (strtoi(inning) * 2)),
#result_runs = strtoi(sub("\\-.*","",score)) + strtoi(sub("*.\\-","",score)),
#result_runs = strsplit(score,"-")[1],
#current_runs = lag(result_runs,n=1,default=0),
row_id = row_number()) %>%
ungroup()
View(set_pbp)
set_pbp <- filter(test_games_pbp,!grepl(paste(summary_stats, collapse = '|'),description))
## Attributes useful for other calculations
## May need to consider incomplete innings
set_pbp <- set_pbp %>%
separate(score, c('away_score', 'home_score'), sep="-") %>%
group_by(game_pbp_id) %>%
mutate(inning_half = case_when(inning_top_bot == 'top' ~ ((strtoi(inning) * 2) - 1), # in this case, set WL to 1
TRUE  ~ (strtoi(inning) * 2)),
result_runs = strtoi(away_score) + strtoi(home_score),
#current_runs = lag(result_runs,n=1,default=0),
row_id = row_number()) %>%
ungroup()
View(set_pbp)
set_pbp <- filter(test_games_pbp,!grepl(paste(summary_stats, collapse = '|'),description))
## Attributes useful for other calculations
## May need to consider incomplete innings
set_pbp <- set_pbp %>%
separate(score, c('away_score', 'home_score'), sep="-") %>%
group_by(game_pbp_id) %>%
mutate(inning_half = case_when(inning_top_bot == 'top' ~ ((strtoi(inning) * 2) - 1), # in this case, set WL to 1
TRUE  ~ (strtoi(inning) * 2)),
result_runs = strtoi(away_score) + strtoi(home_score),
current_runs = lag(result_runs,n=1,default=0),
row_id = row_number()) %>%
ungroup()
View(set_pbp)
