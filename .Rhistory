# Out of Zone Contact Indicator
mutate(OContactYN = ifelse(TrueBallYN ==1 & ContactYN == 1, 1, 0)) %>%
# Zone Contact Indicator
mutate(ZContactYN = ifelse(TrueStrikeYN ==1 & ContactYN == 1, 1, 0)) %>%
# In Play Indicator
mutate(InPlayYN = ifelse(PitchCall == 'InPlay', 1, 0)) %>%
# Not sure if OutcomeYN is correct,
# could be the source of broken AVG/OBP/SLG on tableau
mutate(OutcomeYN = ifelse(!is.na(KorBB), 1, 0)) %>%
# Batted Ball Type Indicators
mutate(DBYN = ifelse(BBType == 'DB', 1, 0)) %>%
mutate(GBYN = ifelse(BBType == 'GB', 1, 0)) %>%
mutate(LDYN = ifelse(BBType == 'LD', 1, 0)) %>%
mutate(HDYN = ifelse(BBType == 'HD', 1, 0)) %>%
mutate(FBYN = ifelse(BBType == 'FB', 1, 0)) %>%
mutate(PUYN = ifelse(BBType == 'PU', 1, 0)) %>%
# Hit Indicator
mutate(HitYN = ifelse(PlayResult %in% c('Single', 'Double', 'Triple', 'HomeRun'), 1,0)) %>%
# Walk Indicator
mutate(WalkYN = ifelse(PlayResult == 'Walk', 1,0)) %>%
# HBP Indicator
mutate(HBPYN = ifelse(PlayResult == 'HitByPitch', 1,0)) %>%
# Sacrifice Indicator
mutate(SacYN = ifelse(PlayResult == 'Sacrifice', 1,0)) %>%
mutate(SlugVal = case_when(PlayResult == 'Single' ~ 1,
PlayResult == 'Double' ~ 2,
PlayResult == 'Triple' ~ 3,
PlayResult == 'HomeRun' ~ 4,
TRUE ~ 0)) %>%
# Count Variable
mutate(Count = paste0(Balls,'-',Strikes)) %>%
# TrueExitVelo and TrueLaunchAngle don't take into account foul balls for reporting
mutate(TrueExitVelo = case_when(PitchCall == 'FoulBall' ~ NaN,
TRUE ~ as.numeric(ExitSpeed))) %>%
mutate(TrueLaunchAngle = case_when(PitchCall == 'FoulBall' ~ NaN,
TRUE ~ as.numeric(Angle))) %>%
# Next Pitch columns aren't really used
mutate(NextPitch = ifelse(lead(EmptyCountYN) == 1, NA, lead(AutoPitchType))) %>%
mutate(NextPitchNumber = ifelse(lead(EmptyCountYN) == 1, NA, lead(PitchNo))) %>%
mutate(HardHitYN = case_when(is.na(TrueExitVelo) ~  NaN,
TrueExitVelo > 90 ~ 1,
TRUE ~ 0))
# Split to Pitcher and Hitter Datasets and write to csv
pitcher_data <- clean_data %>%
filter(PitcherTeam == opponent)
opponent <- "WAG_SEA"
pitcher_data <- clean_data %>%
filter(PitcherTeam == opponent)
hitter_data <- clean_data %>%
filter(BatterTeam == opponent)
pitcher_data
write.csv(x = pitcher_data,
#file = pitcher_path,
row.names = FALSE)
pitcher_path <- paste(data_folder, opponent,
paste(opponent, "Pitcher-Data.csv"), sep = "/")
data_folder <- "data2023"
pitcher_path <- paste(data_folder, opponent,
paste(opponent, "Pitcher-Data.csv"), sep = "/")
pitcher_path
write.csv(x = pitcher_data,
file = pitcher_path,
row.names = FALSE)
help("write.csv")
write.csv(x = pitcher_data,
file = "pitcher_test.csv",
row.names = FALSE)
install.packages("baseballr")
library("baseballr")
ncaa_school_id_lu(team_name = NULL)
ncaa_school_id_lu(team_name = "")
all_team_ids <- unique(all_schools$team_id)
all_schools <- ncaa_school_id_lu(team_name = "")
all_team_ids <- unique(all_schools$team_id)
all_team_ids
sort(all_team_ids, decreasing = FALSE)
all_schools <- ncaa_school_id_lu(team_name = "")
all_schools
d1_schools <- all_schools %>% filter(division = 1)
d1_schools <- filter(all_schools, division == 1)
all_schools <- ncaa_school_id_lu(team_name = "")
d1_schools <- filter(all_schools, "division" == 1)
d1_schools
colnames(all_schools)
d1_schools <- filter(all_schools, division == 1)
d1_schools <- filter(all_schools, team_id == 2)
d1_schools <- filter(all_schools, "team_id" == 2)
d1_schools
library("dplyr")
all_schools <- ncaa_school_id_lu(team_name = "")
colnames(all_schools)
d1_schools <- filter(all_schools, team_id == 2)
d1_schools
all_schools <- ncaa_school_id_lu(team_name = "")
d1_schools <- filter(all_schools, division == 1)
d1_schools
unique(d1_schools$division)
d1_schools <- filter(all_schools, division == 1 && year == 2023)
d1_schools
d1_schools <- filter(all_schools, division == 1 & year == 2023)
d1_schools
unique(d1_schools$season_id)
all_team_ids <- unique(d1_schools$team_id)
sort(all_team_ids, decreasing = FALSE)
d1_schools <- filter(all_schools, division == 1 & year == 2023 & team_id ==2)
d1_schools
d1_schools <- filter(all_schools, division == 1 & year == 2023 & team_id ==3)
d1_schools
d1_schools <- filter(all_schools, division == 1 & year == 2023 & team_id == 4)
d1_schools
d1_schools <- filter(all_schools, division == 1 & year == 2023)
d1_schools
all_team_ids <- unique(d1_schools$team_id)
sort(all_team_ids, decreasing = FALSE)
d1_schools <- filter(all_schools, division == 1 & year == 2023 & team_id == 5)
d1_schools
all_team_ids <- sort(unique(d1_schools$team_id), decreasing = FALSE)
all_team_ids
d1_schools <- filter(all_schools, division == 1 & year == 2023)
all_team_ids <- sort(unique(d1_schools$team_id), decreasing = FALSE)
all_team_ids
--install.packages("baseballr")
##install.packages("baseballr")
library("baseballr")
install.packages("baseballr")
install.packages("baseballr")
library("baseballr")
library("dplyr")
all_schools <- ncaa_school_id_lu(team_name = "")
d1_schools <- filter(all_schools, division == 1 & year == 2023)
all_team_ids <- sort(unique(d1_schools$team_id), decreasing = FALSE)
all_team_ids
d1_schools
nc_state_test <- filter(all_schools,conference == 'ACC')
nc_state_test
unique(nc_state_test$team_name)
nc_state_test <- filter(all_schools,team_name == 'NC State')
nc_state_test
x <- ncaa_schedule_info(490, 2023)$game_info_url[2]
ncaa_pbp(game_info_url = x)
nc_state <- ncaa_pbp(game_info_url = x)
nc_state
nc_state.columns
nc_state.columns()
colnames(nc_state)
unique(nc_state$game_pbp_id)
x <- ncaa_schedule_info(490, 2023)#$game_info_url[2]
nc_state <- ncaa_pbp(game_info_url = x)
x
x <- ncaa_schedule_info(490, 2023)$game_info_url[1]
x
nc_state <- ncaa_pbp(game_info_url = x)
unique(nc_state$game_pbp_id)
nc_state <- ncaa_pbp(game_info_url = x)
x <- ncaa_schedule_info(490, 2023)
single_bscore <- x$game_info_url[1]
unique(x$game_info_url)
single_bscore <- x$game_info_url[1]
nc_state <- ncaa_pbp(game_info_url = x)
single_bscore <- x$game_info_url[1]
nc_state <- ncaa_pbp(game_info_url = single_bscore)
singe_pbp <- ncaa_pbp(game_info_url = single_bscore)
single_pbp <- ncaa_pbp(game_info_url = single_bscore)
single_pbp
single_pbp$description
columns(single_pbp)
colnames(single_pbp)
for(i in 1:nrow(single_pbp)) {
print(i)
}
for(i in 1:nrow(single_pbp)) {
print(i$description)
}
for(i in 1:nrow(single_pbp)) {
print(single_pbp[1]$description)
}
for(i in 1:nrow(single_pbp)) {
print(single_pbp[i]$description)
}
single_pbp
every_play <- single_pbp$description
single_pbp <- ncaa_pbp(game_info_url = single_bscore)
every_play <- single_pbp$description
every_play
for(i in 1:nrow(single_pbp)) {
print(single_pbp[i]$description)
}
nrow(single_pbp)
for(i in 1:nrow(single_pbp)) {
single_pbp[i]
}
for(i in 1:nrow(single_pbp)) {
single_pbp[i]$description
}
every_play
row_count <- nrow(single_pbp)
row_count
play <- single_pbp[i]$description
for(i in 1:row_count) {
play <- single_pbp[i]$description
print(play)
}
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single_or_not <- grepl(value, play)
print(play)
print(grepl)
}
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single_or_not <- grepl(value, play)
print(play)
print(single_or_not)
}
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer",play)
print(play)
if (single = TRUE) "SINGLE was hit"
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer",play)
print(play)
if (single == TRUE) {
print("SINGLE was hit")
}
}
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
print(play)
if (single = TRUE) {
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
print(play)
if (single == TRUE) {
print("b is greater than a")
}
}
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
print(play)
}
single_pbp
sub_df = subset(single_pbp, select = c(inning, inning_top_bot,batting,fielding,description))
sub_df
unique(sub_df)
new_test <- unique(sub_df)
row_count <- nrow(new_test)
row_count
for(i in 1:row_count) {
play <- new_test[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
print(play)
}
my_df <- as.data.frame(sub_df)
my_df
row_count <- nrow(my_df)
row_count
for(i in 1:row_count) {
play <- my_df[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
print(play)
}
my_df[1]
my_df
my_df[1,]
my_df[1]
row_count <- nrow(sub_df)
row_count
for(i in 1:row_count) {
play <- my_df[i,]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
print(play)
}
for(i in 1:row_count) {
play <- my_df[i,]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
if (single == TRUE) "Yes A single" else "NOt a single"
}
for(i in 1:row_count) {
play <- my_df[i,]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
if (single == TRUE) print("Yes A single") else print("NOt a single")
}
#install.packages("baseballr")
library("baseballr")
library("dplyr")
library("tidyverse")
remove.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
## We need to take the PBP scrape and return a run expectancy matrix similar to
## https://rfrey22.medium.com/collegiate-linear-weights-f0237cf40451
## Read in the necessary libararies
library("dplyr")
library("tidyverse")
## Set working directory and read in PBP CSV
setwd('C:/Users/tyler/OneDrive/Coding Work Materials/ncaa_run_expectancies')
pbp = read.csv('single_pbp.csv',header = TRUE)
## Next steps
## Partition data by base-out state and AVERAGE runs til end of inning attributes
re_matrix <- pbp %>%
mutate(runs_end_2 = end_half_inning_runs - current_runs) %>%
group_by(base_cd_before,outs_before) %>%
summarize(mean = mean(runs_end_2),
average = sum(runs_end_2)/count(runs_end_2))
count([1,2,3])
count(1)
count(c(1,2,3))
help("count")
help("tally")
library("dplyr")
df <- tribble(
~name,    ~gender,   ~runs,
"Max",    "male",       10,
"Sandra", "female",      1,
"Susan",  "female",      4
)
# counts rows:
df %>% count(gender)
# counts runs:
df %>% count(gender, wt = runs)
re_matrix <- pbp %>%
mutate(runs_end_2 = end_half_inning_runs - current_runs) %>%
group_by(base_cd_before,outs_before) %>%
tally() %>%
summarize(mean = mean(runs_end_2))
## We need to take the PBP scrape and return a run expectancy matrix similar to
## https://rfrey22.medium.com/collegiate-linear-weights-f0237cf40451
## Read in the necessary libararies
library("dplyr")
library("tidyverse")
## Set working directory and read in PBP CSV
setwd('C:/Users/tyler/OneDrive/Coding Work Materials/ncaa_run_expectancies')
pbp = read.csv('single_pbp.csv',header = TRUE)
## Next steps
## Partition data by base-out state and AVERAGE runs til end of inning attributes
re_matrix <- pbp %>%
mutate(runs_end_2 = end_half_inning_runs - current_runs) %>%
group_by(base_cd_before,outs_before) %>%
tally() %>%
summarize(mean = mean(runs_end_2))
re_matrix <- pbp %>%
mutate(runs_end_2 = end_half_inning_runs - current_runs) %>%
group_by(base_cd_before,outs_before) %>%
##tally() %>%
summarize(mean = mean(runs_end_2))
View(re_matrix)
testing <- filter(pbp, base_cd_before == 0 & outs_before == 0)
View(testing)
re_matrix <- ##pbp %>%
filter(pbp, event_cd != c(0,1)) %>%
mutate(runs_end_2 = end_half_inning_runs - current_runs) %>%
group_by(base_cd_before,outs_before) %>%
##tally() %>%
summarize(mean = mean(runs_end_2))
re_matrix <- pbp %>%
filter(!event_cd %in% c(0,1)) %>%
mutate(runs_end_2 = end_half_inning_runs - current_runs) %>%
group_by(base_cd_before,outs_before) %>%
summarize(mean = mean(runs_end_2))
View(re_matrix)
testing <- filter(pbp, base_cd_before == 0 & outs_before == 0)
View(testing)
pbp_game_events <- pbp %>%
filter(!event_cd %in% c(0,1))
re_matrix <- pbp_game_events %>%
mutate(runs_end_2 = end_half_inning_runs - current_runs) %>%
group_by(base_cd_before,outs_before) %>%
summarize(mean = mean(runs_end_2))
View(re_matrix)
## Test a base/out state to validate results. Can do manual calculations if small enough dataset
testing <- filter(pbp_game_events, base_cd_before == 0 & outs_before == 0)
View(testing)
pbp_game_events <- pbp %>%
filter(!event_cd %in% c(0,1))
## Partition data by base-out state and AVERAGE runs til end of inning attributes
re_matrix <- pbp_game_events %>%
mutate(runs_end_2 = end_half_inning_runs - current_runs) %>%
group_by(base_cd_before,outs_before) %>%
summarize(mean = mean(runs_end_2))
View(re_matrix)
## Test a base/out state to validate results. Can do manual calculations if small enough dataset
testing <- filter(pbp_game_events, base_cd_before == 0 & outs_before == 0)
View(testing)
## We need to take the PBP scrape and return a run expectancy matrix similar to
## https://rfrey22.medium.com/collegiate-linear-weights-f0237cf40451
## Read in the necessary libararies
library("dplyr")
library("tidyverse")
## Set working directory and read in PBP CSV
setwd('C:/Users/tyler/OneDrive/Coding Work Materials/ncaa_run_expectancies')
pbp = read.csv('single_pbp.csv',header = TRUE)
## Next steps
## Filter out non game-events
pbp_game_events <- pbp %>%
filter(!event_cd %in% c(0,1))
## Partition data by base-out state and AVERAGE runs til end of inning attributes
re_matrix <- pbp_game_events %>%
mutate(runs_end_2 = end_half_inning_runs - current_runs) %>%
group_by(base_cd_before,outs_before) %>%
summarize(mean = mean(runs_end_2))
View(re_matrix)
## Test a base/out state to validate results. Can do manual calculations if small enough dataset
testing <- filter(pbp_game_events, base_cd_before == 0 & outs_before == 0)
View(testing)
## Write final results to a CSV file
write.csv(x = re_matrix,
file = "RE_Matrix.csv",
row.names = FALSE)
testing <- filter(pbp_game_events, base_cd_before == 7 & outs_before == 0)
View(testing)
pbp_game_events <- pbp %>%
filter(!event_cd %in% c(0,1))
View(pbp_game_events)
pbp_game_events <- pbp %>%
filter(!event_cd %in% c(0,1)) %>%
mutate(base_cd_after = case_when(
end_inning_flag != 1 ~ lead(base_cd_before,n=1),
TRUE ~ NULL
))
help("lead")
pbp_game_events <- pbp %>%
filter(!event_cd %in% c(0,1)) %>%
mutate(base_cd_after = case_when(
end_inning_flag != 1 ~ lead(base_cd_before,n=1,default=NULL),
TRUE ~ NULL
))
pbp_game_events <- pbp %>%
filter(!event_cd %in% c(0,1)) %>%
mutate(base_cd_after = case_when(
end_inning_flag != 1 ~ lead(base_cd_before,n=1,default=0),
TRUE ~ NULL
))
pbp_game_events <- pbp %>%
filter(!event_cd %in% c(0,1)) %>%
mutate(base_cd_after = case_when(
end_inning_flag != 1 ~ lead(base_cd_before,n=1,default=NA),
TRUE ~ NULL
))
pbp_game_events <- pbp %>%
filter(!event_cd %in% c(0,1)) %>%
mutate(base_cd_after = case_when(
end_inning_flag != 1 ~ lead(base_cd_before, order_by = row_id),
TRUE ~ NULL
))
pbp_game_events <- pbp %>%
filter(!event_cd %in% c(0,1)) %>%
mutate(base_cd_after = case_when(
end_inning_flag != 1 ~ lead(base_cd_before, order_by = row_id),
TRUE ~ 0
))
pbp_game_events <- pbp %>%
filter(!event_cd %in% c(0,1)) %>%
mutate(base_cd_after = case_when(
end_inning_flag != 1 ~ lead(base_cd_before,n=1),
TRUE ~ 0
))
help("case_when")
pbp_game_events <- pbp %>%
filter(!event_cd %in% c(0,1)) %>%
mutate(base_cd_after = case_when(
end_inning_flag != 1 ~ lead(base_cd_before,n=1)
))
View(pbp_game_events)
