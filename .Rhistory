for(i in 1:nrow(single_pbp)) {
print(single_pbp[i]$description)
}
nrow(single_pbp)
for(i in 1:nrow(single_pbp)) {
single_pbp[i]
}
for(i in 1:nrow(single_pbp)) {
single_pbp[i]$description
}
every_play
row_count <- nrow(single_pbp)
row_count
play <- single_pbp[i]$description
for(i in 1:row_count) {
play <- single_pbp[i]$description
print(play)
}
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single_or_not <- grepl(value, play)
print(play)
print(grepl)
}
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single_or_not <- grepl(value, play)
print(play)
print(single_or_not)
}
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer",play)
print(play)
if (single = TRUE) "SINGLE was hit"
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer",play)
print(play)
if (single == TRUE) {
print("SINGLE was hit")
}
}
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
print(play)
if (single = TRUE) {
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
print(play)
if (single == TRUE) {
print("b is greater than a")
}
}
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
print(play)
}
single_pbp
sub_df = subset(single_pbp, select = c(inning, inning_top_bot,batting,fielding,description))
sub_df
unique(sub_df)
new_test <- unique(sub_df)
row_count <- nrow(new_test)
row_count
for(i in 1:row_count) {
play <- new_test[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
print(play)
}
my_df <- as.data.frame(sub_df)
my_df
row_count <- nrow(my_df)
row_count
for(i in 1:row_count) {
play <- my_df[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
print(play)
}
my_df[1]
my_df
my_df[1,]
my_df[1]
row_count <- nrow(sub_df)
row_count
for(i in 1:row_count) {
play <- my_df[i,]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
print(play)
}
for(i in 1:row_count) {
play <- my_df[i,]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
if (single == TRUE) "Yes A single" else "NOt a single"
}
for(i in 1:row_count) {
play <- my_df[i,]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
if (single == TRUE) print("Yes A single") else print("NOt a single")
}
#install.packages("baseballr")
library("baseballr")
library("dplyr")
library("tidyverse")
remove.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library("baseballr")
library("dplyr")
library("tidyverse")
setwd('C:/Users/tyler/OneDrive/Coding Work Materials/ncaa_run_expectancies')
all_schools <- ncaa_school_id_lu(team_name = "")
d1_schools <- filter(all_schools, division == 1 & year == 2023)
all_team_ids <- sort(unique(d1_schools$team_id), decreasing = FALSE)
all_team_ids
library("baseballr")
library("dplyr")
library("tidyverse")
setwd('C:/Users/tyler/OneDrive/Coding Work Materials/ncaa_run_expectancies')
all_schools <- ncaa_school_id_lu(team_name = "")
d1_schools <- filter(all_schools, division == 1 & year == 2023)
all_team_ids <- sort(unique(d1_schools$team_id), decreasing = FALSE)
nc_state_test <- filter(all_schools,team_name == 'NC State')
## 490 is NC State's team_id
### NEEDS ####
# 1) Start of Inning position
# 2) End of Inning position
# 3) Previous Base-Out State
# 4) Result
# 5) New Base-Out State
# 6) Runs scored til end of inning
## Grabbing the schedule info for NC State for 2023
x <- ncaa_schedule_info(490, 2023)
## Using first available game of season only for testing only
single_bscore <- x$game_info_url[1]
single_pbp <- ncaa_pbp(game_info_url = single_bscore)
print(single_bscore)
library("baseballr")
library("dplyr")
library("tidyverse")
setwd('C:/Users/tyler/OneDrive/Coding Work Materials/ncaa_run_expectancies')
all_schools <- ncaa_school_id_lu(team_name = "")
d1_schools <- filter(all_schools, division == 1 & year == 2023)
all_team_ids <- sort(unique(d1_schools$team_id), decreasing = FALSE)
all_team_ids
pbp_scrape <- function(team_id) {
y <- ncaa_schedule_info(team_id, 2023)
View(y)
#single_bscore <- x$game_info_url[1]
#single_pbp <- ncaa_pbp(game_info_url = single_bscore)
}
pbp_scrape(490)
pbp_scrape <- function(team_id) {
bscore_rec <- c()
y <- ncaa_schedule_info(team_id, 2023)
View(y)
#single_bscore <- x$game_info_url[1]
#single_pbp <- ncaa_pbp(game_info_url = single_bscore)
}
pbp_scrape(490)
pbp_scrape <- function(team_id) {
bscore_rec <- c()
y <- ncaa_schedule_info(team_id, 2023)
bx_urls <- y$game_info_url
for i in bx_url {
pbp_scrape <- function(team_id) {
bscore_rec <- c()
y <- ncaa_schedule_info(team_id, 2023)
bx_urls <- y$game_info_url
for i in bx_urls {
pbp_scrape <- function(team_id) {
bscore_rec <- c()
y <- ncaa_schedule_info(team_id, 2023)
bx_urls <- y$game_info_url
for (x in bx_urls) {
print(i)
}
#View(y)
#single_bscore <- x$game_info_url[1]
#single_pbp <- ncaa_pbp(game_info_url = single_bscore)
}
pbp_scrape(490)
pbp_scrape <- function(team_id) {
bscore_rec <- c()
y <- ncaa_schedule_info(team_id, 2023)
bx_urls <- list(y$game_info_url)
for (x in bx_urls) {
print(i)
}
#View(y)
#single_bscore <- x$game_info_url[1]
#single_pbp <- ncaa_pbp(game_info_url = single_bscore)
}
pbp_scrape(490)
pbp_scrape <- function(team_id) {
bscore_rec <- c()
y <- ncaa_schedule_info(team_id, 2023)
bx_urls <- y$game_info_url
print(bx_urls)
for (i in seq_along(bx_urls)) {
print(i)
}
#View(y)
#single_bscore <- x$game_info_url[1]
#single_pbp <- ncaa_pbp(game_info_url = single_bscore)
}
pbp_scrape(490)
pbp_scrape <- function(team_id) {
bscore_rec <- c()
y <- ncaa_schedule_info(team_id, 2023)
bx_urls <- y$game_info_url
print(bx_urls)
#for (i in seq_along(bx_urls)) {
#  print(i)
#}
#View(y)
#single_bscore <- x$game_info_url[1]
#single_pbp <- ncaa_pbp(game_info_url = single_bscore)
}
pbp_scrape(490)
pbp_scrape <- function(team_id) {
bscore_rec <- c()
y <- ncaa_schedule_info(team_id, 2023)
bx_urls <- y$game_info_url
View(bx_urls)
#print(bx_urls)
#for (i in seq_along(bx_urls)) {
#  print(i)
#}
#View(y)
#single_bscore <- x$game_info_url[1]
#single_pbp <- ncaa_pbp(game_info_url = single_bscore)
}
pbp_scrape(490)
pbp_scrape <- function(team_id) {
bscore_rec <- c()
y <- ncaa_schedule_info(team_id, 2023)
bx_urls <- y$game_info_url[2]
View(bx_urls)
#print(bx_urls)
#for (i in seq_along(bx_urls)) {
#  print(i)
#}
#View(y)
#single_bscore <- x$game_info_url[1]
#single_pbp <- ncaa_pbp(game_info_url = single_bscore)
}
pbp_scrape(490)
pbp_scrape <- function(team_id) {
bscore_rec <- c()
y <- ncaa_schedule_info(team_id, 2023)
bx_urls <- unique(y$game_info_url)
View(bx_urls)
#print(bx_urls)
#for (i in seq_along(bx_urls)) {
#  print(i)
#}
#View(y)
#single_bscore <- x$game_info_url[1]
#single_pbp <- ncaa_pbp(game_info_url = single_bscore)
}
pbp_scrape(490)
pbp_scrape <- function(team_id) {
bscore_rec <- c()
y <- ncaa_schedule_info(team_id, 2023)
bx_urls <- c(unique(y$game_info_url))
print(bx_urls)
#print(bx_urls)
#for (i in seq_along(bx_urls)) {
#  print(i)
#}
#View(y)
#single_bscore <- x$game_info_url[1]
#single_pbp <- ncaa_pbp(game_info_url = single_bscore)
}
pbp_scrape(490)
pbp_scrape <- function(team_id) {
bscore_rec <- c()
y <- ncaa_schedule_info(team_id, 2023)
bx_urls <- c(unique(y$game_info_url))
print(bx_urls)
#print(bx_urls)
for (i in seq_along(bx_urls)) {
print(i)
}
#View(y)
#single_bscore <- x$game_info_url[1]
#single_pbp <- ncaa_pbp(game_info_url = single_bscore)
}
pbp_scrape(490)
pbp_scrape <- function(team_id) {
bscore_rec <- c()
y <- ncaa_schedule_info(team_id, 2023)
bx_urls <- c(unique(y$game_info_url))
#print(bx_urls)
#print(bx_urls)
for (i in seq_along(bx_urls)) {
print(bx_urls[i])
}
#View(y)
#single_bscore <- x$game_info_url[1]
#single_pbp <- ncaa_pbp(game_info_url = single_bscore)
}
pbp_scrape(490)
pbp_scrape <- function(team_id) {
bscore_rec <- c()
y <- ncaa_schedule_info(team_id, 2023)
bx_urls <- y$game_info_url
for (i in seq_along(bx_urls)) {
print(bx_urls[i])
}
#View(y)
#single_bscore <- x$game_info_url[1]
#single_pbp <- ncaa_pbp(game_info_url = single_bscore)
}
pbp_scrape(490)
help("if")
pbp_scrape <- function(team_id) {
bscore_vec <- c()
y <- ncaa_schedule_info(team_id, 2023)
bx_urls <- y$game_info_url
for (i in seq_along(bx_urls)) {
url = bx_urls[i]
if (any(url==bscore_vec) == FALSE) {
append(bscore_vec,url)
}
}
#View(y)
#single_bscore <- x$game_info_url[1]
#single_pbp <- ncaa_pbp(game_info_url = single_bscore)
}
pbp_scrape(490)
pbp_scrape <- function(team_id) {
bscore_vec <- c()
y <- ncaa_schedule_info(team_id, 2023)
bx_urls <- y$game_info_url
for (i in seq_along(bx_urls)) {
url = bx_urls[i]
if (any(url==bscore_vec) == FALSE) {
append(bscore_vec,url)
}
}
print(bscore_vec)
}
pbp_scrape(490)
pbp_scrape <- function(team_id) {
bscore_vec <- c()
y <- ncaa_schedule_info(team_id, 2023)
bx_urls <- y$game_info_url
for (i in seq_along(bx_urls)) {
url = bx_urls[i]
if (any(url==bscore_vec) == FALSE) {
print("Added")
}
}
#print(bscore_vec)
}
pbp_scrape(490)
pbp_scrape <- function(team_id) {
bscore_vec <- list()
y <- ncaa_schedule_info(team_id, 2023)
bx_urls <- y$game_info_url
for (i in seq_along(bx_urls)) {
url = bx_urls[i]
if (any(url==bscore_vec) == FALSE) {
append(bscore_vec,url)
}
}
#print(bscore_vec)
}
pbp_scrape(490)
pbp_scrape <- function(team_id) {
bscore_vec <- list()
y <- ncaa_schedule_info(team_id, 2023)
bx_urls <- y$game_info_url
for (i in seq_along(bx_urls)) {
url = bx_urls[i]
if (any(url==bscore_vec) == FALSE) {
append(bscore_vec,url)
}
}
print(bscore_vec)
}
pbp_scrape(490)
pbp_scrape <- function(team_id) {
bscore_vec <- list()
y <- ncaa_schedule_info(team_id, 2023)
bx_urls <- y$game_info_url
for (i in seq_along(bx_urls)) {
url = bx_urls[i]
if (any(url==bscore_vec) == FALSE) {
bscore_vec <- append(bscore_vec,url)
}
}
print(bscore_vec)
}
pbp_scrape(490)
pbp_scrape <- function(team_id) {
bscore_vec <- list()
y <- ncaa_schedule_info(team_id, 2023)
bx_urls <- y$game_info_url
for (i in seq_along(bx_urls)) {
url = bx_urls[i]
if (any(url==bscore_vec) == FALSE) {
bscore_vec <- append(bscore_vec,url[1])
}
}
print(bscore_vec)
}
pbp_scrape(490)
pbp_scrape <- function(team_id) {
bscore_vec <- list()
y <- ncaa_schedule_info(team_id, 2023)
bx_urls <- y$game_info_url
for (i in seq_along(bx_urls)) {
url = unlist(bx_urls[i])
if (any(url==bscore_vec) == FALSE) {
bscore_vec <- append(bscore_vec,url)
}
}
print(bscore_vec)
}
pbp_scrape(490)
pbp_scrape <- function(team_id) {
bscore_vec <- list()
y <- ncaa_schedule_info(team_id, 2023)
bx_urls <- y$game_info_url
for (i in seq_along(bx_urls)) {
url = unlist(bx_urls[i])
if (any(url==bscore_vec) == FALSE) {
bscore_vec <- append(bscore_vec,url)
}
}
print(bscore_vec)
View(bscore_vec)
}
pbp_scrape(490)
list_2 = list(1,2,3,4,5)
print(list_2)
list_2 = list(1,2,3,4,5)
print(list_2[1])
list_2 = list(1,2,3,4,5)
print(list_2[[1]][1])
list_2 = list(1,2,3,4,5)
print(list_2[[1]][1][1])
list_2 = list(1,2,3,4,5)
print(list_2[[1]])
print(list_2[[1]])
myVec <- numeric (maxLength)  # a vector of maximum length
pbp_scrape <- function(team_id) {
bscore_vec <- c()
y <- ncaa_schedule_info(team_id, 2023)
bx_urls <- y$game_info_url
for (i in seq_along(bx_urls)) {
url = unlist(bx_urls[i])
if (any(url==bscore_vec) == FALSE) {
bscore_vec <- append(bscore_vec,url)
}
}
print(bscore_vec)
#View(bscore_vec)
}
pbp_scrape(490)
vec_t <- c(1,2,3)
print(vec_t)
