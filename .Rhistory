curve(func_of_x, from=0, to=n, xlab="X", ylab = "Values", main = "Values of |X-0.5n| for n=100")
curve(func_of_x2, from=0, to=50, xlab="|X-0.5n|", ylab="Lambda Values")
curve(func_of_x2, from=0, to=50, xlab="|X-0.5n|", ylab="Lambda Values", main = "Lambda values for X = |X-0.5n| for n=100")
curve(func_of_x, from=0, to=n, xlab="X", ylab = "Values |X-0.5n|", main = "Values of |X-0.5n| for n=100")
curve(func_of_x2, from=0, to=50, xlab="|X-0.5n|", ylab="Lambda Values", main = "Lambda values for X = |X-0.5n| for n=100")
1-pchisq(csqr_obs,df=12-1-1)
pchisq(csqr_obs,df=12-1-1,lower.tail=FALSE)
install.packages("bigrquery")
install.packages("bigrquery")
install.packages("bigrquery")
install.packages("bigrquery")
library(bigrquery)
library(bigrquery)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
remove.packages("bigrquery")
install.packages("bigrquery")
library(bigrquery)
bq_auth()
#Your project ID here
project_id <- "ncsu-baseball-376016"
#Sample query
sql_string <- "SELECT * FROM 2023_BASEBALL.ncsu_test_game LIMIT 1000"
#Execute the query and storing the result
query_results <- query_exec(sql_string, project = project_id, useLegacySql = FALSE)
#Execute the query and storing the result
query_results <- bq_perform_query(sql_string, project = project_id, useLegacySql = FALSE)
help("bq_perform_query")
query_results <- bq_perform_query(query = sql_string, billing = '011856-CD623A-C6BB78' project = project_id, useLegacySql = FALSE)
#Execute the query and storing the result
query_results <- bq_perform_query(query = sql_string, billing = 011856-CD623A-C6BB78 project = project_id, useLegacySql = FALSE)
#Execute the query and storing the result
query_results <- bq_perform_query(query = sql_string, billing = 011856-CD623A-C6BB78, project = project_id, useLegacySql = FALSE)
#Execute the query and storing the result
query_results <- bq_perform_query(query = sql_string, billing = '011856-CD623A-C6BB78', project = project_id, useLegacySql = FALSE)
#Execute the query and storing the result
query_results <- bq_perform_query(query = sql_string, billing = '011856-CD623A-C6BB78', ProjectId = project_id, DatasetId = '2023_BASEBALL', useLegacySql = FALSE)
billing <- 'ncsu-baseball-376016'  # replace this with your project ID
sql <- "SELECT * FROM `ncsu-baseball-376016.2023_BASEBALL.ncsu_test_game`"
tb <- bq_project_query(billing, sql)
bq_table_download(tb, n_max = 10)
tb
library(bigrquery)
#Your project ID here
project_id <- "ncsu-baseball-376016"
#Sample query
sql_string <- "SELECT * FROM 2023_BASEBALL.ncsu_test_game LIMIT 1000"
billing <- 'ncsu-baseball-376016'  # replace this with your project ID
sql <- "SELECT * FROM `ncsu-baseball-376016.2023_BASEBALL.ncsu_test_game`"
tb <- bq_project_query(billing, sql)
bq_table_download(tb, n_max = 10)
data.frame(tb)
testing <- data.frame(bq_table_download(tb, n_max = 10))
testing
testing
cat("\014")
##remove.packages("bigrquery")
##install.packages("bigrquery")
##remove.packages("rlang")
##install.packages("rlang")
library(bigrquery)
bq_auth()
billing <- 'ncsu-baseball-376016'  # replace this with your project ID
sql <- "SELECT * FROM `ncsu-baseball-376016.2023_BASEBALL.ncsu_test_game`"
tb <- bq_project_query(billing, sql)
bq_table_download(tb, n_max = 10)
testing <- data.frame(bq_table_download(tb, n_max = 10))
testing
cat("\014")
##remove.packages("bigrquery")
##install.packages("bigrquery")
##remove.packages("rlang")
##install.packages("rlang")
library(bigrquery)
bq_auth()
billing <- 'ncsu-baseball-376016'  # replace this with your project ID
sql <- "SELECT * FROM `ncsu-baseball-376016.2023_BASEBALL.ncsu_test_game`"
tb <- bq_project_query(billing, sql)
## bq_table_download(tb, n_max = 10)
testing <- data.frame(bq_table_download(tb, n_max = 10))
testing
cat("\014")
##remove.packages("bigrquery")
##install.packages("bigrquery")
##remove.packages("rlang")
##install.packages("rlang")
library(bigrquery)
bq_auth()
billing <- 'ncsu-baseball-376016'  # replace this with your project ID
sql <- "SELECT * FROM `ncsu-baseball-376016.2023_BASEBALL.ncsu_test_game`"
tb <- bq_project_query(billing, sql)
## bq_table_download(tb, n_max = 10)
testing <- data.frame(bq_table_download(tb, n_max = 10))
testing
# Libraries
library(factoextra)
library(plyr)
library(dplyr)
library(tidyverse)
library(bigrquery)
bq_auth()
billing <- 'ncsu-baseball-376016'  # replace this with your project ID
sql <- "SELECT * FROM `ncsu-baseball-376016.2023_BASEBALL.ncsu_test_game`"
tb <- bq_project_query(billing, sql)
dataset <- data.frame(bq_table_download(tb, n_max = 300))
dataset <- dataset[, 1:86]
# Adding columns
clean_data <- dataset %>%
group_by(PitcherId) %>%
dplyr::mutate(IndPitch = row_number()) %>%
ungroup() %>%
# BB Type is From 2017 FanGraphs article:
# https://fantasy.fangraphs.com/anglebbtypes/
# I know this could all be done in 1 mutate statement seperated by
# commas, but this was easier to debug so sue me. - Billy Fryer
mutate(BBType = case_when(PitchCall == 'InPlay' & Angle < 0 ~ "GB",
PitchCall == 'InPlay' & Angle >= 10 & Angle < 19 ~ "LD",
PitchCall == 'InPlay' & Angle >= 19 & Angle < 26 ~ "HD",
PitchCall == 'InPlay' & Angle >= 26 & Angle < 39 ~ "FB",
PitchCall == 'InPlay' ~ 'PU',
TRUE ~ "NA"
)) %>%
# Swing Yes No Indicator
mutate(SwungYN = case_when(PitchCall %in% c('InPlay', 'FoulBall', 'StrikeSwinging') ~ 1,
TRUE ~ 0)) %>%
# Contact Indicator
mutate(ContactYN = case_when(PitchCall %in% c('InPlay', 'FoulBall') ~ 1,
TRUE ~ 0)) %>%
# Swinging Strike Indicator
mutate(SwStrYN = case_when(PitchCall == 'StrikeSwinging' ~ 1,
TRUE ~ 0)) %>%
# Called Strike Indicator
mutate(CallStrikeYN = case_when(PitchCall == 'StrikeCalled' ~ 1,
TRUE ~ 0)) %>%
# True Strike Indicator
# Could change definition of zone, this is what Cole Adams used
mutate(TrueStrikeYN = case_when(
# Right Handed Batters
(BatterSide == 'Right' & PlateLocHeight >= 1.75 &
PlateLocHeight <= 3.4 & PlateLocSide >= -.9 &
PlateLocSide <= .9) ~ 1,
# Left Handed Batters
(BatterSide == 'Left' & PlateLocHeight >= 1.75 &
PlateLocHeight <= 3.4 & PlateLocSide >= -1 &
PlateLocSide <= .71) ~ 1,
TRUE ~ 0)) %>%
# True Ball Indicator
mutate(TrueBallYN = as.numeric(!as.logical(TrueStrikeYN))) %>%
# Empty Count Indicator
mutate(EmptyCountYN = case_when(Balls == 0 & Strikes == 0 ~ 1,
TRUE ~ 0)) %>%
# First Pitch Strike Indicator
mutate(FPitchStrikeYN = case_when(as.logical(EmptyCountYN) &
str_detect(PitchCall,"Strike") ~ 1,
TRUE ~ 0)) %>%
# Out of Zone Swing Indicator
mutate(OSwingYN = ifelse(TrueBallYN ==1 & SwungYN == 1, 1, 0)) %>%
# Zone Swing Indicator
mutate(ZSwingYN = ifelse(TrueStrikeYN ==1 & SwungYN == 1, 1, 0)) %>%
# Out of Zone Contact Indicator
mutate(OContactYN = ifelse(TrueBallYN ==1 & ContactYN == 1, 1, 0)) %>%
# Zone Contact Indicator
mutate(ZContactYN = ifelse(TrueStrikeYN ==1 & ContactYN == 1, 1, 0)) %>%
# In Play Indicator
mutate(InPlayYN = ifelse(PitchCall == 'InPlay', 1, 0)) %>%
# Not sure if OutcomeYN is correct,
# could be the source of broken AVG/OBP/SLG on tableau
mutate(OutcomeYN = ifelse(!is.na(KorBB), 1, 0)) %>%
# Batted Ball Type Indicators
mutate(DBYN = ifelse(BBType == 'DB', 1, 0)) %>%
mutate(GBYN = ifelse(BBType == 'GB', 1, 0)) %>%
mutate(LDYN = ifelse(BBType == 'LD', 1, 0)) %>%
mutate(HDYN = ifelse(BBType == 'HD', 1, 0)) %>%
mutate(FBYN = ifelse(BBType == 'FB', 1, 0)) %>%
mutate(PUYN = ifelse(BBType == 'PU', 1, 0)) %>%
# Hit Indicator
mutate(HitYN = ifelse(PlayResult %in% c('Single', 'Double', 'Triple', 'HomeRun'), 1,0)) %>%
# Walk Indicator
mutate(WalkYN = ifelse(PlayResult == 'Walk', 1,0)) %>%
# HBP Indicator
mutate(HBPYN = ifelse(PlayResult == 'HitByPitch', 1,0)) %>%
# Sacrifice Indicator
mutate(SacYN = ifelse(PlayResult == 'Sacrifice', 1,0)) %>%
mutate(SlugVal = case_when(PlayResult == 'Single' ~ 1,
PlayResult == 'Double' ~ 2,
PlayResult == 'Triple' ~ 3,
PlayResult == 'HomeRun' ~ 4,
TRUE ~ 0)) %>%
# Count Variable
mutate(Count = paste0(Balls,'-',Strikes)) %>%
# TrueExitVelo and TrueLaunchAngle don't take into account foul balls for reporting
mutate(TrueExitVelo = case_when(PitchCall == 'FoulBall' ~ NaN,
TRUE ~ as.numeric(ExitSpeed))) %>%
mutate(TrueLaunchAngle = case_when(PitchCall == 'FoulBall' ~ NaN,
TRUE ~ as.numeric(Angle))) %>%
# Next Pitch columns aren't really used
mutate(NextPitch = ifelse(lead(EmptyCountYN) == 1, NA, lead(AutoPitchType))) %>%
mutate(NextPitchNumber = ifelse(lead(EmptyCountYN) == 1, NA, lead(PitchNo))) %>%
mutate(HardHitYN = case_when(is.na(TrueExitVelo) ~  NaN,
TrueExitVelo > 90 ~ 1,
TRUE ~ 0))
# Split to Pitcher and Hitter Datasets and write to csv
pitcher_data <- clean_data %>%
filter(PitcherTeam == opponent)
opponent <- "WAG_SEA"
pitcher_data <- clean_data %>%
filter(PitcherTeam == opponent)
hitter_data <- clean_data %>%
filter(BatterTeam == opponent)
pitcher_data
write.csv(x = pitcher_data,
#file = pitcher_path,
row.names = FALSE)
pitcher_path <- paste(data_folder, opponent,
paste(opponent, "Pitcher-Data.csv"), sep = "/")
data_folder <- "data2023"
pitcher_path <- paste(data_folder, opponent,
paste(opponent, "Pitcher-Data.csv"), sep = "/")
pitcher_path
write.csv(x = pitcher_data,
file = pitcher_path,
row.names = FALSE)
help("write.csv")
write.csv(x = pitcher_data,
file = "pitcher_test.csv",
row.names = FALSE)
install.packages("baseballr")
library("baseballr")
ncaa_school_id_lu(team_name = NULL)
ncaa_school_id_lu(team_name = "")
all_team_ids <- unique(all_schools$team_id)
all_schools <- ncaa_school_id_lu(team_name = "")
all_team_ids <- unique(all_schools$team_id)
all_team_ids
sort(all_team_ids, decreasing = FALSE)
all_schools <- ncaa_school_id_lu(team_name = "")
all_schools
d1_schools <- all_schools %>% filter(division = 1)
d1_schools <- filter(all_schools, division == 1)
all_schools <- ncaa_school_id_lu(team_name = "")
d1_schools <- filter(all_schools, "division" == 1)
d1_schools
colnames(all_schools)
d1_schools <- filter(all_schools, division == 1)
d1_schools <- filter(all_schools, team_id == 2)
d1_schools <- filter(all_schools, "team_id" == 2)
d1_schools
library("dplyr")
all_schools <- ncaa_school_id_lu(team_name = "")
colnames(all_schools)
d1_schools <- filter(all_schools, team_id == 2)
d1_schools
all_schools <- ncaa_school_id_lu(team_name = "")
d1_schools <- filter(all_schools, division == 1)
d1_schools
unique(d1_schools$division)
d1_schools <- filter(all_schools, division == 1 && year == 2023)
d1_schools
d1_schools <- filter(all_schools, division == 1 & year == 2023)
d1_schools
unique(d1_schools$season_id)
all_team_ids <- unique(d1_schools$team_id)
sort(all_team_ids, decreasing = FALSE)
d1_schools <- filter(all_schools, division == 1 & year == 2023 & team_id ==2)
d1_schools
d1_schools <- filter(all_schools, division == 1 & year == 2023 & team_id ==3)
d1_schools
d1_schools <- filter(all_schools, division == 1 & year == 2023 & team_id == 4)
d1_schools
d1_schools <- filter(all_schools, division == 1 & year == 2023)
d1_schools
all_team_ids <- unique(d1_schools$team_id)
sort(all_team_ids, decreasing = FALSE)
d1_schools <- filter(all_schools, division == 1 & year == 2023 & team_id == 5)
d1_schools
all_team_ids <- sort(unique(d1_schools$team_id), decreasing = FALSE)
all_team_ids
d1_schools <- filter(all_schools, division == 1 & year == 2023)
all_team_ids <- sort(unique(d1_schools$team_id), decreasing = FALSE)
all_team_ids
--install.packages("baseballr")
##install.packages("baseballr")
library("baseballr")
install.packages("baseballr")
install.packages("baseballr")
library("baseballr")
library("dplyr")
all_schools <- ncaa_school_id_lu(team_name = "")
d1_schools <- filter(all_schools, division == 1 & year == 2023)
all_team_ids <- sort(unique(d1_schools$team_id), decreasing = FALSE)
all_team_ids
d1_schools
nc_state_test <- filter(all_schools,conference == 'ACC')
nc_state_test
unique(nc_state_test$team_name)
nc_state_test <- filter(all_schools,team_name == 'NC State')
nc_state_test
x <- ncaa_schedule_info(490, 2023)$game_info_url[2]
ncaa_pbp(game_info_url = x)
nc_state <- ncaa_pbp(game_info_url = x)
nc_state
nc_state.columns
nc_state.columns()
colnames(nc_state)
unique(nc_state$game_pbp_id)
x <- ncaa_schedule_info(490, 2023)#$game_info_url[2]
nc_state <- ncaa_pbp(game_info_url = x)
x
x <- ncaa_schedule_info(490, 2023)$game_info_url[1]
x
nc_state <- ncaa_pbp(game_info_url = x)
unique(nc_state$game_pbp_id)
nc_state <- ncaa_pbp(game_info_url = x)
x <- ncaa_schedule_info(490, 2023)
single_bscore <- x$game_info_url[1]
unique(x$game_info_url)
single_bscore <- x$game_info_url[1]
nc_state <- ncaa_pbp(game_info_url = x)
single_bscore <- x$game_info_url[1]
nc_state <- ncaa_pbp(game_info_url = single_bscore)
singe_pbp <- ncaa_pbp(game_info_url = single_bscore)
single_pbp <- ncaa_pbp(game_info_url = single_bscore)
single_pbp
single_pbp$description
columns(single_pbp)
colnames(single_pbp)
for(i in 1:nrow(single_pbp)) {
print(i)
}
for(i in 1:nrow(single_pbp)) {
print(i$description)
}
for(i in 1:nrow(single_pbp)) {
print(single_pbp[1]$description)
}
for(i in 1:nrow(single_pbp)) {
print(single_pbp[i]$description)
}
single_pbp
every_play <- single_pbp$description
single_pbp <- ncaa_pbp(game_info_url = single_bscore)
every_play <- single_pbp$description
every_play
for(i in 1:nrow(single_pbp)) {
print(single_pbp[i]$description)
}
nrow(single_pbp)
for(i in 1:nrow(single_pbp)) {
single_pbp[i]
}
for(i in 1:nrow(single_pbp)) {
single_pbp[i]$description
}
every_play
row_count <- nrow(single_pbp)
row_count
play <- single_pbp[i]$description
for(i in 1:row_count) {
play <- single_pbp[i]$description
print(play)
}
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single_or_not <- grepl(value, play)
print(play)
print(grepl)
}
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single_or_not <- grepl(value, play)
print(play)
print(single_or_not)
}
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer",play)
print(play)
if (single = TRUE) "SINGLE was hit"
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer",play)
print(play)
if (single == TRUE) {
print("SINGLE was hit")
}
}
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
print(play)
if (single = TRUE) {
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
print(play)
if (single == TRUE) {
print("b is greater than a")
}
}
for(i in 1:row_count) {
play <- single_pbp[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
print(play)
}
single_pbp
sub_df = subset(single_pbp, select = c(inning, inning_top_bot,batting,fielding,description))
sub_df
unique(sub_df)
new_test <- unique(sub_df)
row_count <- nrow(new_test)
row_count
for(i in 1:row_count) {
play <- new_test[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
print(play)
}
my_df <- as.data.frame(sub_df)
my_df
row_count <- nrow(my_df)
row_count
for(i in 1:row_count) {
play <- my_df[i]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
print(play)
}
my_df[1]
my_df
my_df[1,]
my_df[1]
row_count <- nrow(sub_df)
row_count
for(i in 1:row_count) {
play <- my_df[i,]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
print(play)
}
for(i in 1:row_count) {
play <- my_df[i,]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
if (single == TRUE) "Yes A single" else "NOt a single"
}
for(i in 1:row_count) {
play <- my_df[i,]$description
value <- "single"
single <- grepl("single", play)
double <- grepl("double", play)
triple <- grepl("triple", play)
homer <- grepl("homer", play)
if (single == TRUE) print("Yes A single") else print("NOt a single")
}
#install.packages("baseballr")
library("baseballr")
library("dplyr")
library("tidyverse")
remove.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
View(pbp)
library("baseballr")
library("dplyr")
library("tidyverse")
setwd('C:/Users/tyler/OneDrive/Coding Work Materials')
pbp <- read.csv(file="pbp.csv",
header=TRUE)
setwd('C:/Users/tyler/OneDrive/Coding Work Materials/ncaa_run_expectancies')
game_ids <- unique(pbp$game_pbp_id)
test_games <- sample(game_ids,size=10,replace=FALSE)
test_games_pbp <- filter(pbp,game_pbp_id %in% test_games)
